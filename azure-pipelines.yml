# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main

jobs:

- job: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.7'
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - bash: | 
       sudo apt-get update
       wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
       bash miniconda.sh -b -p $HOME/miniconda
       export PATH="$HOME/miniconda/bin:$PATH"
       hash -r
       conda update -q conda --yes
       conda info -a
       conda update -c defaults -c conda-forge --all --yes
    displayName: 'Install anaconda'
  - bash: | 
       export PATH="$HOME/miniconda/bin:$PATH"
       conda create --yes -n thor python=$(python.version) -c defaults -c conda-forge -c moeyensj --file requirements.txt
    displayName: 'Install conda packages'
  - bash: | 
       export PATH="$HOME/miniconda/bin:$PATH"
       source activate thor
       python setup.py install
    displayName: 'Install THOR'
  - bash: |
      export PATH="$HOME/miniconda/bin:$PATH"
      source activate thor
      pytest thor --cov=thor --doctest-modules --junitxml=junit/test-results.xml 
    displayName: 'Run tests'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/test-results.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()

- job: 'Publish'
  dependsOn: 'Test'
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      architecture: 'x64'

  - script: python setup.py sdist
    displayName: 'Build sdist'
